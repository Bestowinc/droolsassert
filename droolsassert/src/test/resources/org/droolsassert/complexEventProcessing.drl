package org.droolsassert;
dialect 'mvel'

import org.droolsassert.ComplexEventProcessingTest.Dialing
import org.droolsassert.ComplexEventProcessingTest.CallInProgress
import org.droolsassert.ComplexEventProcessingTest.CallDropped

declare CallDropped @role (event) @expires (0s) end

global java.io.PrintStream stdout

rule 'input call'
    when
        $dial: Dialing()
        not CallInProgress(callerNumber == $dial.calleeNumber)
        not CallInProgress(calleeNumber == $dial.calleeNumber)
    then
        insert (new CallInProgress($dial.callerNumber, $dial.calleeNumber))
        retract ($dial)
end

rule 'drop dial-up if callee is talking'
    timer (7001)
    when
        $dial: Dialing()
        (CallInProgress(callerNumber == $dial.calleeNumber)
            or CallInProgress(calleeNumber == $dial.calleeNumber))
    then
        insert (new CallDropped($dial.callerNumber, $dial.calleeNumber, 'callee is busy'))
end

rule 'drop the call if caller is talking more than permitted time'
    timer (int: 30m)
    when
        $callInProgress : CallInProgress()
    then
        insert (new CallDropped($callInProgress.callerNumber, $callInProgress.calleeNumber, 'call timed out'))
end

rule 'call in progress dropped'
    when
        $callDropped: CallDropped()
        $callInProgress : CallInProgress($callDropped.pair contains callerNumber, $callDropped.pair contains calleeNumber)
    then
        stdout.println('Call ' + $callInProgress.callerNumber + ' dropped due to ' + $callDropped.reason)
        retract ($callInProgress)
end

rule 'input call dropped'
    when
        $callDropped: CallDropped() 
        $dial : Dialing($callDropped.pair contains callerNumber, $callDropped.pair contains calleeNumber)
    then
        stdout.println('Dial-up ' + $dial.callerNumber + ' dropped due to ' + $callDropped.reason)
        retract ($dial)
end
